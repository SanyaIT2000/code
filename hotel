#include <iostream>
#include <fstream>
#include <cstring>
using namespace std;
class Room {
    int capacity; // Количество гостей, на которое комната рассчитана
    bool occupied;       // Занята ли комната
public:
    Room(int capacity = 1, bool occupied = false) : capacity(capacity), occupied(occupied) {}
    bool is_occupied();  // Метод, который позволяет узнать, занята ли комната
    int get_capacity();  // Метод, который получает количество гостей, которые умещаются в комнату
    void reserve();      // Занять номер
    void free();         // Освободить номер
};
bool Room::is_occupied() {
    return occupied;
}
int Room::get_capacity() {
    return capacity;
}
void Room::reserve() {
    occupied = true;
}
void Room::free() {
    occupied = false;
}
class Hotel {
    int room_count;
    Room* rooms;           // Дин. массив комнат
public:
    Hotel(int room_count, ifstream &f);
    //Hotel(const Hotel&);
    ~Hotel();
    int get_room_count();  // Узнать количество комнат   
    Room& get_room(int p); // Получить комнату под номером p
    int count_free();      // Подсчитать количество свободных комнат
    int find_room(int k);  // Найти комнату ровно на k гостей
};
Hotel::Hotel(int room_count, ifstream &f) : room_count(room_count) {
    rooms = new Room[room_count];
    for (int i = 0;i < room_count;i++) {
        int c, z;
        f >> c >> z;
        rooms[i] = Room(c, z);
    }
}
Hotel::~Hotel() {
    delete[] rooms;
}
int Hotel::get_room_count() {
    return room_count;
}
Room& Hotel::get_room(int p) {
    return rooms[p];
}
int Hotel::count_free() {
    int count = 0;
    for (int i = 0;i < room_count;i++) {
        if (!rooms[i].is_occupied())count++;
    }
    return count;
}
int Hotel::find_room(int k) {
    for (int i = 0;i < room_count;i++) {
        if (rooms[i].get_capacity() == k && !rooms[i].is_occupied()) { rooms[i].reserve(); return i; }
    }
    return -1;
}
Hotel load_hotel(ifstream &file) {
    int room_count;
    file >> room_count;
    Hotel Eleon(room_count, file);
    return Eleon;
}
void save_hotel(ofstream& file, Hotel &h) {
    int rc = h.get_room_count();
    file << rc << endl;
    for (int i = 0;i < rc;i++) {
        file << h.get_room(i).get_capacity() << " " << h.get_room(i).is_occupied() << endl;
    }
}
int main() {
    ifstream f("source.txt");
    ofstream e("destination.txt");
    Hotel Eleon = load_hotel(f);
    int E;
    f >> E;
    for (int i = 0;i < E;i++) {
        char command[10];
        f >> command;
        if (!strcmp(command, "RESERVE")) {
        int p;
        f >> p;
        int I = Eleon.find_room(p);
        Eleon.get_room(I).reserve();
        }
        else if (!strcmp(command, "STATUS")) { e << Eleon.count_free() << endl; }
        else if (!strcmp(command, "FREE")) {
            int p;
            f >> p;
            int I = Eleon.find_room(p);
            Eleon.get_room(I).free();
        }
    }
    save_hotel(e, Eleon);
    return 0;
}
